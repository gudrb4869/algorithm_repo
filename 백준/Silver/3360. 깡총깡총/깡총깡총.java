import java.io.BufferedReader;
import java.io.InputStreamReader;

/**
 * <pre>
 * 입력n |  0 |  1   2   3     4      5        6        7         8            9            10
 * 1시작 |       1  11   111  1111   11111    111111  1111111   11111111    111111111     1111111111
 *  
 * 2시작 |           2    21   211    2111     21111   211111    2111111    21111111       211111111
 *                            22     221       2211    22111    221111      2211111       22111111
 *                                             222      2221     22211      222111         2221111
 *                                                               2222        22221         222211
 *                                                                                          22222
 *                                                               
 * 
 * 3시작 |                 3    31     311      3111     31111     311111     3111111       31111111
 *                                    32       321     3211       32111      321111        3211111
 *                                              33      322       3221       32211          322111
 *                                                      331       3311        3222          32221
 *                                                                 332        33111         331111
 *                                                                            3321          33211
 *                                                                             333          3322
 *                                                                                          3331
 *                                                                                          
 * 이 문제에서는 1,2,3을 이용해 입력n의 합을 만들어야하는데 증가하지 않는 순서로 만들어야한다.
 * 근데 1로시작할때와 2로시작할때, 3으로 시작할때를 쭉 나열해보면 일정한 규칙을 가지고 있는 것을 파악할 수 있는데,
 * 1로 시작할때는 n-1의 1로시작할때에서 앞에 1만 덧붙여주면 완성이된다.
 * 2로 시작할때는 n-2의 1로시작할때,2로시작할때에서 앞에 2만 덧붙여주면 완성이된다.
 * 3으로 시작할때는 n-3의 1로시작할때,2로시작할때,3으로시작할때에서 앞에 3만 덧붙여주면 완성이된다!
 * 따라서 점화식을 세워보면 dp[i] = (i/2) + 1 + dp[i-3] 이라는 것을 알 수가 있는데
 * 문제는 n이 최대 10억이므로 다이나믹 프로그래밍을 바텀업 방식으로 진행한다면 메모리초과가 발생할 수가 있다.
 * 따라서 탑다운 방식으로 dp를 진행하여 문제를 해결해보았다.                                                                                           
 * </pre>
 * @author 박형규
 * 
 */
public class Main {

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		
		int n = Integer.parseInt(br.readLine()); // 표준입력
		int answer = 0; // 프로그램 결과값
		int i = n; // dp 탑다운 방식으로 진행
		while (i >= 0) { // i가 0이상일동안만 진행
			answer += (i/2 + 1) % 1_000_000;
			answer %= 1_000_000;
			i -= 3; // dp[i] = (i/2)+1 + dp[i-3]
		}
		
		sb.append(answer).append("\n");
		System.out.print(sb);
	}
}